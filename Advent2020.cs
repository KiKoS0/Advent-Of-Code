using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using static Util.Utility;

namespace Advent
{
    /// <summary>
    /// Advent of code 2020 solutions https://adventofcode.com/
    /// Puzzle inputs are compressed(bzip) and base64 encoded 
    /// </summary>
    public static class Advent2020
    {
        public static void Day1()
        {
            IList<int> data = (IList<int>)DecodeBase64(Base64Db[0], '\n');
            var count = data.Count;
            for (var i = 0; i < count; ++i)
                for (var j = i + 1; j < count; ++j)
                    for (var k = i + 2; k < count; k++)
                        if (data[j] + data[i] + data[k] == 2020)
                            Console.WriteLine($"Result: {data[j] * data[i] * data[k]}");
        }
        public static void Day2()
        {
            IList<string> data = (IList<string>)DecodeBase64AsStr(Base64Db[1], '\n');
            var count = data.Count;
            var sum = 0;
            for (var i = 0; i < count; ++i)
            {
                var item = data[i].Split(' ');
                var str = item[2];
                var chr = item[1].Trim()[0];
                var pos = item[0].Split('-').Select(x => int.Parse(x)).ToList();

                if (str[pos[0] - 1] == chr ^ str[pos[1] - 1] == chr)
                    sum++;
            }
            Console.WriteLine($"Result: {sum}");
        }
        public static void Day3()
        {
            IList<string> data = (IList<string>)DecodeBase64AsStr(Base64Db[2], '\n');
            long HowManyTrees(int down, int right)
            {
                long trees = 0;
                for (int i = down, j = right; i < data.Count; i += down, j = (j + right) % data[0].Length)
                    trees += data[i][j] == '#' ? 1 : 0;
                return trees;
            }
            var result = (new[] { (1, 1), (1, 3), (1, 5), (1, 7), (2, 1) })
                .Aggregate((long)1, (acc, next) => acc * HowManyTrees(next.Item1, next.Item2));
            Console.WriteLine($"Result: {result}");
        }
        public static void Day4()
        {
            IList<string> data = (IList<string>)DecodeBase64AsStr(Base64Db[3], '\n');
            if (data.Last() != "") data.Add("");
            int line = 0, valid_fields = 0, valid_pass = 0;
            var hasCid = false;
            while (line < data.Count)
            {
                if (string.IsNullOrWhiteSpace(data[line]))
                {
                    if (valid_fields == 8 || (valid_fields == 7 && !hasCid)) ++valid_pass;
                    line++; valid_fields = 0; hasCid = false; continue;
                }

                static bool CheckField(string str, out bool isCid)
                {
                    static bool IsValidDigit(string str, int len, int lower, int upper) =>
                        str.Length == len &&
                        int.TryParse(str, out int res) &&
                        res >= lower &&
                        res <= upper;
                    isCid = false;
                    var temp = str.Split(':');
                    var (id, val) = (temp[0], temp[1]);
                    return (id, val.Length > 1 ? val[^2..] : val) switch
                    {
                        ("hgt", "cm") => IsValidDigit(val[..^2], 3, 150, 193),
                        ("hgt", "in") => IsValidDigit(val[..^2], 2, 59, 76),
                        ("cid", _) => isCid = true,
                        ("hcl", _) => (new Regex(@"^#(\d|[a-f]){6}$")).IsMatch(val),
                        ("ecl", _) => (new Regex(@"^amb|blu|brn|gry|grn|hzl|oth$")).IsMatch(val),
                        ("pid", _) => (new Regex(@"^\d{9}$")).IsMatch(val),
                        ("byr", _) => IsValidDigit(val, 4, 1920, 2002),
                        ("iyr", _) => IsValidDigit(val, 4, 2010, 2020),
                        ("eyr", _) => IsValidDigit(val, 4, 2020, 2030),
                        (_, _) => false,
                    };
                }
                var (h, cid) = data[line].Split().Aggregate((valid_fields, hasCid), (acc, next) =>
                    (CheckField(next, out bool isCid) ? ++acc.valid_fields : acc.valid_fields, acc.hasCid | isCid));
                valid_fields = h; ++line; hasCid = cid;
            }
            Console.WriteLine($"Result {valid_pass}");
        }

        public static void Day5()
        {
            IList<string> data = (IList<string>)DecodeBase64AsStr(Base64Db[4], '\n');
            int StrBitsToNumber(string str, char up, char down)
                => str.Aggregate(
                    (0, 0),
                    (acc, next) => (acc.Item1 + 1, acc.Item2 |
                    (next == up ? 1 : 0) << str.Length - 1 - acc.Item1)
                    , x => x.Item2);
            int SeatId(string str)
                => StrBitsToNumber(str[..7], 'B', 'F') * 8 + StrBitsToNumber(str[7..], 'R', 'L');
            Console.WriteLine($"Result: {data.Max(SeatId)}");
            var lst = new List<int>();
            foreach (var i in data)
                lst.Add(SeatId(i));
            long MissingSeat(IList<int> lst)
            {
                long n = lst.Count, total = (n + 1) * (n + 2 * lst.Min()) / 2;
                for (var i = 0; i < n; i++) total -= lst[i];
                return total;
            }
            Console.WriteLine($"Empty Seat: {MissingSeat(lst)}");
        }

        private static string[] Base64Db = {
            "QlpoOTFBWSZTWVnhsqAAALBIAAAQf+BAAgpc07soinmRikImYIoGpsmkbUEiAU0IlXvOeQ8mN9v0QYCM4CglKFD5ITHQd8E3LPNLgUp1ypbEedgxrsEgWVuWo1m1iqKLBx4O2yvhjsIaz2bloiUWefUhHMdbh7SmZqdvdqzwq3rbLNI90CA63keeAhU6/KmZMFyI6VZG2u0J3zm8vOru8sipxgTUJIppCj6BLzNYeuBAdkAA5mUkFLF7era770TXwZ4db5mzuOOrwGP2iA7W2mIMrh47fiYnmXRuq9GxTdkcS8cZlPIB9E3OUraHcZVyiMiZuVnpuSqzd3NlXx53vyfQs6Oamo81jBUHQBJ5kj1qIZ5zfPu4LtoZSvrss8iCavoPEOFbmzKqLPH5fSsheRgcWd0EhbLmE6gIyAq4PmVUK2in5qmzzz7vvqMHvS+q/bOlzB8wyfroLmao7IGw1g0Dh9gBPqt7VujcZE7s6PayFhLwQ+NENW9ysoI+nKVtHMV7CIyapH4u5IpwoSCzw2VA",
            "",
            "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",
        };
    }
}
